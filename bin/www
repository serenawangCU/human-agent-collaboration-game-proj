#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tetris5150:server');
var http = require('http');
var socketIo = require('socket.io');
const Game = require('./Game.js');
const uuidv1 = require('uuid/v1');
const GameStatus = require('./GameStatus.js');
const TotalScores = require('../models/totalScores.js');
const Games = require('../models/games.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
// var port = normalizePort('5000');
console.log(port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
var io = socketIo.listen(server);

// Global variable to record the user to be paired
let idleUser = null;
// Global variable to record the status of each room
let games = {};
io.on('connection', (socket) => {
	console.log('Client connected');
	// Listen on entering the game
	socket.on('add_user', (userName) => {
		addUser(socket, userName);
	});

	// Listen on becoming ready to start the game
	socket.on('ready', () => {
		prepareGame(socket);
	});

	// Deal with the move from players
	socket.on('move', (direction) => {
		moveBlocks(socket, direction);
	});

	// Record the player's willingness to play again
	socket.on('game_again', (willingness) => {
		if (willingness === true) {
			console.log("Player " + socket.id + " is willing to play again");

			outputSingleKeyToDb('playAgain', socket);
		}
	});
	
	// Record the player's willingness to play again with the same player
	socket.on('same_player', (willingness) =>{
		if (willingness === true) {
			console.log("Player " + socket.id + " is willing to play with the same person");

			outputSingleKeyToDb('playWithSameAgain', socket);
		}
	});

	// Listen on the collected survey answers
	socket.on('survey', (data) => {
		console.log('survey answer: ' + data);

		// udpate the database to indicate that the player would like to play again
		if (socket.roomId !== null) {
			Games.findById(socket.roomId)
			.then((game) => {
				if (game.player1.playerId === socket.id) {
					for (let ques in data) {
						game.survey1.push(data[ques]);
					}
				} else if (game.player2.playerId === socket.id) {
					for (let ques in data) {
						game.survey2.push(data[ques]);
					}
				}

				return game.save();
			})
			.then(() => {
				console.log("Successfully update player " + socket.id +"'s survey to MongoDB!");
			})
			.catch((err) => {
				console.log(err);
			})
		}
	});

	// TODO: delete after refactoring
	// Query Total Score Distribution
	socket.on('totalScoreDistribution', (totalScore) => {
		TotalScores.find({"totalScore": {"$lte": totalScore}})
		.count()
		.then((index) => {
			TotalScores.count({})
			.then((totalCounts) => {
				socket.emit('totalScoreDistributionReturn', {
					index: index,
					counts: totalCounts 
				})
			})
		})
	});

	// Listen on disconnecting from the server
	socket.on('disconnect', () => {
		disconnect(socket);
	});
})

/**
 * Function to store the collected information to DB
 * Support single attribute under player information ONLY
 * @param key the key to set true
 * @param socket the socket of the current player
 */

function outputSingleKeyToDb(key, socket) {
	// udpate the database to indicate that the player would like to play again
	if (socket.roomId !== null) {
		Games.findById(socket.roomId)
		.then((game) => {
			if (game.player1.playerId === socket.id) {
				game.player1[key] = true;
			} else if (game.player2.playerId === socket.id) {
				game.player2[key] = true;
			}

			return game.save();
		})
		.then(() => {
			console.log("Successfully update player " + socket.id + "'s info of " 
						+ key + " to MongoDB!");
		})
		.catch((err) => {
			console.log(err);
		})
	}
}

/**
 * Handle when a new user enters the waiting lobby
 * @param socket: the socket of the added user
 * @param userName: new user's name
 */
function moveBlocks(socket, direction) {
	if (!socket.hasOwnProperty("roomId")) {
		return;
	}

	let curGame = games[socket.roomId];
	if (curGame != null) {
		curGame.move(direction);
	}
}


/**
 * Handle when a new user enters the waiting lobby
 * @param socket: the socket of the added user
 * @param userName: new user's name
 */

function addUser(socket, userName) {
	socket.userName = userName;

	console.log("connected: " + userName);
	// Use the same event for pairing no matter it's successful or not
	if (idleUser == null) {
		// If there's no available user
		// Set the current user as the idle user
		idleUser = socket;
		socket.emit('paired', {
			result: false,
			userName: null
		});
	} else {
		// Pairing succeed

		//Generate a random room id
		let roomId = uuidv1();

		// Join the room
		idleUser.join(roomId);
		socket.join(roomId);
		console.log("join room: " + roomId);
		// Record game status
		// Use room id to index
		games[roomId] = new Game(idleUser.id, socket.id, roomId, io);

		// Set fields
		idleUser.roomId = roomId;
		socket.roomId = roomId;
		console.log('set room idleUser:' + idleUser);
		console.log('set room socket:' + socket);
		idleUser.opponent = socket;
		socket.opponent = idleUser;
		idleUser.ifReady = false;
		socket.ifReady = false;

		// Rename the usernames if they are the same
		if (socket.userName === idleUser.userName) {
			socket.userName = socket.userName + '2';
			idleUser.userName = idleUser.userName + '1';

			// Send the changed names back
			socket.emit('rename', socket.userName);
			idleUser.emit('rename', idleUser.userName);
		}

		// Emit the pairing result
		idleUser.emit('paired', {
			result: true,
			userName: socket.userName
		})

		socket.emit('paired', {
			result: true,
			userName: idleUser.userName
		})

		// Reset the idle user
		idleUser = null;
	}
}

/**
 * Handle when a user is ready to start the game
 * @param socket: the socket of the ready user 
 */

function prepareGame(socket) {
	socket.ifReady = true;

	io.in(socket.roomId).emit('gaming', {
		result: socket.opponent.ifReady
	});

	if (socket.opponent.ifReady == true) {
		startSendingGameField(socket);
	}
}

/**
 * Function to start sending the game field priodically
 * @param socket: one of the players in the room
 */

function startSendingGameField(socket) {

	// Checking
	if(socket.hasOwnProperty("roomId") && games.hasOwnProperty(socket.roomId)) {

		let curGame = games[socket.roomId];
		let roomId = socket.roomId;

		// Start the game
		// Game moving and message sending have different speeds
		// TODO: find an appropriate speed
		curGame.loop();

		var gameContentsIntervel = setInterval(() => {
			//if game over, clear the current interval
			if (curGame.gameStatus == GameStatus.OVER) {
				delete games[roomId];
				clearInterval(gameContentsIntervel);
			}
			io.in(roomId).emit('game_contents', {
				gameField: curGame.wrapBlockAndField()
			});
		}, 1000/30);
	} else {
		console.log("Invalid start game triggered by " + socket.id);
	}
}

/**
 * Handle when a user disconnects from the server
 * @param socket: the socket of the user to disconnect
 */

function disconnect(socket) {
	// If the idle user leaves the lobby
	// Reset the global idle user id
	if (idleUser === socket) {
		idleUser = null;
	}

	// Notify the room of the leaving
	if (socket.roomId) {
		io.in(socket.roomId).emit('leaving');
		if (games[socket.roomId] != null) {
			games[socket.roomId].finishGame();
			delete games[socket.roomId];
		}

		// Output the quit information to DB
		outputSingleKeyToDb('ifQuit', socket);
	}
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
			? 'Pipe ' + port
			: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			onsole.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;

		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;

		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
			? 'pipe ' + addr
			: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
